// Code generated by "cue exp gengotypes"; DO NOT EDIT.

package phases

import (
	"time"
)

// Phase is the universal schema for all phases in all project types.
// What makes a phase unique is its guards, prompts, and which operations it supports.
type Phase struct {
	// Common metadata
	Status string `json:"status"`

	Enabled bool `json:"enabled"`

	// Timestamps
	Created_at time.Time `json:"created_at"`

	Started_at *time.Time `json:"started_at,omitempty"`

	Completed_at *time.Time `json:"completed_at,omitempty"`

	// Generic collections (used by phases that need them)
	Artifacts []Artifact `json:"artifacts"`

	Tasks []Task `json:"tasks"`

	// Phase-specific data (discovery_type, iteration, etc.)
	Metadata map[string]any/* CUE top */ `json:"metadata,omitempty"`
}

// Artifact represents a phase artifact requiring human approval
type Artifact struct {
	// Path relative to .sow/project/
	Path string `json:"path"`

	// Human approval status
	Approved bool `json:"approved"`

	// When artifact was created
	Created_at time.Time `json:"created_at"`

	// Phase-specific metadata (type, assessment, etc.)
	Metadata map[string]any/* CUE top */ `json:"metadata,omitempty"`
}

// Task represents an implementation task
type Task struct {
	// Gap-numbered ID (010, 020, 030...)
	Id string `json:"id"`

	// Task name
	Name string `json:"name"`

	// Task status
	Status string `json:"status"`

	// Can run in parallel with other tasks
	Parallel bool `json:"parallel"`

	// Task IDs this task depends on
	Dependencies []string `json:"dependencies,omitempty"`
}
