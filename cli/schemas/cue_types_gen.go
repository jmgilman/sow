// Code generated by "cue exp gengotypes"; DO NOT EDIT.

package schemas

import (
	"time"
)

// ProjectState defines the schema for .sow/project/state.yaml
//
// This file tracks the state of an active project across all 5 phases.
// All projects have the same 5 phases; the 'enabled' flag controls
// which phases actually execute.
type ProjectState struct {
	// Project metadata
	Project struct {
		// Kebab-case project identifier
		Name string `json:"name"`

		// Git branch name this project belongs to
		Branch string `json:"branch"`

		// Human-readable project description
		Description string `json:"description"`

		// ISO 8601 timestamps
		Created_at time.Time `json:"created_at"`

		Updated_at time.Time `json:"updated_at"`
	} `json:"project"`

	// 5-phase structure (fixed phases, enabled flag controls execution)
	Phases struct {
		// Phase 1: Discovery (optional, human-led)
		Discovery DiscoveryPhase `json:"discovery"`

		// Phase 2: Design (optional, human-led)
		Design DesignPhase `json:"design"`

		// Phase 3: Implementation (required, AI-autonomous)
		Implementation ImplementationPhase `json:"implementation"`

		// Phase 4: Review (required, AI-autonomous)
		Review ReviewPhase `json:"review"`

		// Phase 5: Finalize (required, AI-autonomous)
		Finalize FinalizePhase `json:"finalize"`
	} `json:"phases"`
}

// Phase represents common phase fields
type Phase struct {
	// Phase execution status
	Status string `json:"status"`

	// Timestamps
	Created_at time.Time `json:"created_at"`

	Started_at any/* CUE disjunction: (null|string) */ `json:"started_at"`

	Completed_at any/* CUE disjunction: (null|string) */ `json:"completed_at"`
}

// DiscoveryPhase represents the discovery phase
type DiscoveryPhase struct {
	// Phase execution status
	Status string `json:"status"`

	// Timestamps
	Created_at time.Time `json:"created_at"`

	Started_at any/* CUE disjunction: (null|string) */ `json:"started_at"`

	Completed_at any/* CUE disjunction: (null|string) */ `json:"completed_at"`

	// Can be disabled
	Enabled bool `json:"enabled"`

	// Discovery type categorization
	Discovery_type any/* CUE disjunction: (null|string) */ `json:"discovery_type"`

	// Discovery artifacts requiring approval
	Artifacts []Artifact `json:"artifacts"`
}

// DesignPhase represents the design phase
type DesignPhase struct {
	// Phase execution status
	Status string `json:"status"`

	// Timestamps
	Created_at time.Time `json:"created_at"`

	Started_at any/* CUE disjunction: (null|string) */ `json:"started_at"`

	Completed_at any/* CUE disjunction: (null|string) */ `json:"completed_at"`

	// Can be disabled
	Enabled bool `json:"enabled"`

	// Whether architect agent was used
	Architect_used any/* CUE disjunction: (null|bool) */ `json:"architect_used"`

	// Design artifacts requiring approval (ADRs, design docs)
	Artifacts []Artifact `json:"artifacts"`
}

// ImplementationPhase represents the implementation phase
type ImplementationPhase struct {
	// Phase execution status
	Status string `json:"status"`

	// Timestamps
	Created_at time.Time `json:"created_at"`

	Started_at any/* CUE disjunction: (null|string) */ `json:"started_at"`

	Completed_at any/* CUE disjunction: (null|string) */ `json:"completed_at"`

	// Always enabled
	Enabled bool `json:"enabled"`

	// Whether planner agent was used
	Planner_used any/* CUE disjunction: (null|bool) */ `json:"planner_used"`

	// Approved task list (gap-numbered)
	Tasks []Task `json:"tasks"`

	// Tasks awaiting human approval before execution
	Pending_task_additions any/* CUE disjunction: (null|list) */ `json:"pending_task_additions"`
}

// RefsCacheIndex defines the schema for ~/.cache/sow/index.json
//
// This is the cache index containing transient metadata about cached
// repositories. Stored per-machine, not committed to git.
type RefsCacheIndex struct {
	// Schema version (semantic versioning)
	Version string `json:"version"`

	// Cached repository metadata
	Repos []CachedRepo `json:"repos"`
}

// CachedRepo represents a cached repository
type CachedRepo struct {
	// Git repository URL (must match source from committed index)
	Source string `json:"source"`

	// Branch name
	Branch string `json:"branch"`

	// Relative path in cache (from ~/.cache/sow/)
	Cached_path string `json:"cached_path"`

	// Current local commit SHA
	Commit_sha string `json:"commit_sha"`

	// Timestamps
	Cached_at time.Time `json:"cached_at"`

	Last_checked time.Time `json:"last_checked"`

	Last_updated time.Time `json:"last_updated"`

	// Staleness status
	Status string `json:"status"`

	// Number of commits behind remote (null if current)
	Commits_behind any/* CUE disjunction: (null|int) */ `json:"commits_behind"`

	// Latest remote commit SHA
	Remote_sha string `json:"remote_sha"`

	// Repositories using this cache
	Used_by []CacheUsage `json:"used_by"`
}

// CacheUsage represents a repository using this cached repo
type CacheUsage struct {
	// Absolute path to consuming repository
	Repo_path string `json:"repo_path"`

	// How the cache is linked (symlink on Unix, copy on Windows)
	Link_type string `json:"link_type"`

	// Subpaths from this cache used by the consuming repo
	Paths []string `json:"paths"`
}

// RefsCommittedIndex defines the schema for .sow/refs/index.json
//
// This is the committed index containing categorical metadata about
// remote refs, shared with the team via git. Contains configuration
// but not transient data like SHAs or timestamps.
type RefsCommittedIndex struct {
	// Schema version (semantic versioning)
	Version string `json:"version"`

	// Remote reference definitions
	Refs []RemoteRef `json:"refs"`
}

// RefsLocalIndex defines the schema for .sow/refs/index.local.json
//
// This is the local-only index for references that should not be
// shared with the team (e.g., work-in-progress docs, personal notes).
// This file is git-ignored.
type RefsLocalIndex struct {
	// Schema version (semantic versioning)
	Version string `json:"version"`

	// Local reference definitions
	Refs []LocalRef `json:"refs"`
}

// LocalRef represents a local-only reference
type LocalRef struct {
	// Unique identifier
	Id string `json:"id"`

	// Reference type
	Type string `json:"type"`

	// Local file path using file:// protocol
	Source string `json:"source"`

	// Symlink name in .sow/refs/
	Link string `json:"link"`

	// Topic keywords for categorization
	Tags []string `json:"tags"`

	// One-sentence description
	Description string `json:"description"`

	// 2-3 sentence summary
	Summary string `json:"summary"`
}

// RemoteRef represents a remote repository reference
type RemoteRef struct {
	// Unique identifier (generated from source+branch)
	Id string `json:"id"`

	// Reference type
	Type string `json:"type"`

	// Git repository URL (https or ssh)
	Source string `json:"source"`

	// Branch name
	Branch string `json:"branch"`

	// Subpaths within the repository
	Paths []RefPath `json:"paths"`
}

// RefPath represents a subpath within a remote repository
type RefPath struct {
	// Subdirectory path within repo (empty string or "/" for root)
	Path string `json:"path"`

	// Symlink name in .sow/refs/
	Link string `json:"link"`

	// Topic keywords for categorization
	Tags []string `json:"tags"`

	// One-sentence description
	Description string `json:"description"`

	// 2-3 sentence summary
	Summary string `json:"summary"`
}

// ReviewPhase represents the review phase
type ReviewPhase struct {
	// Phase execution status
	Status string `json:"status"`

	// Timestamps
	Created_at time.Time `json:"created_at"`

	Started_at any/* CUE disjunction: (null|string) */ `json:"started_at"`

	Completed_at any/* CUE disjunction: (null|string) */ `json:"completed_at"`

	// Always enabled
	Enabled bool `json:"enabled"`

	// Current review iteration (increments on loop-back)
	Iteration int64 `json:"iteration"`

	// Review reports (numbered 001, 002, 003...)
	Reports []ReviewReport `json:"reports"`
}

// FinalizePhase represents the finalize phase
type FinalizePhase struct {
	// Phase execution status
	Status string `json:"status"`

	// Timestamps
	Created_at time.Time `json:"created_at"`

	Started_at any/* CUE disjunction: (null|string) */ `json:"started_at"`

	Completed_at any/* CUE disjunction: (null|string) */ `json:"completed_at"`

	// Always enabled
	Enabled bool `json:"enabled"`

	// Documentation files updated
	Documentation_updates any/* CUE disjunction: (null|list) */ `json:"documentation_updates"`

	// Design artifacts moved to knowledge (fromâ†’to pairs)
	Artifacts_moved any/* CUE disjunction: (null|list) */ `json:"artifacts_moved"`

	// Critical gate: must be true before phase completion
	Project_deleted bool `json:"project_deleted"`

	// Pull request URL (created during finalize)
	Pr_url any/* CUE disjunction: (null|string) */ `json:"pr_url"`
}

// Artifact represents an artifact requiring human approval
type Artifact struct {
	// Path relative to .sow/project/
	Path string `json:"path"`

	// Human approval status
	Approved bool `json:"approved"`

	// When artifact was created
	Created_at time.Time `json:"created_at"`
}

// Task represents an implementation task
type Task struct {
	// Gap-numbered ID (010, 020, 030...)
	Id string `json:"id"`

	// Task name
	Name string `json:"name"`

	// Task status
	Status string `json:"status"`

	// Can run in parallel with other tasks
	Parallel bool `json:"parallel"`

	// Task IDs this task depends on
	Dependencies any/* CUE disjunction: (null|list) */ `json:"dependencies"`
}

// ReviewReport represents a review iteration report
type ReviewReport struct {
	// Report ID (001, 002, 003...)
	Id string `json:"id"`

	// Path relative to .sow/project/phases/review/
	Path string `json:"path"`

	// When report was created
	Created_at time.Time `json:"created_at"`

	// Review assessment
	Assessment string `json:"assessment"`
}

// TaskState defines the schema for task state files at:
// .sow/project/phases/implementation/tasks/<id>/state.yaml
//
// This tracks metadata for individual implementation tasks.
type TaskState struct {
	Task struct {
		// Task ID (matches directory name, gap-numbered)
		Id string `json:"id"`

		// Task name
		Name string `json:"name"`

		// Always "implementation" in the 5-phase model
		Phase string `json:"phase"`

		// Task execution status
		Status string `json:"status"`

		// Timestamps
		Created_at time.Time `json:"created_at"`

		Started_at any/* CUE disjunction: (null|string) */ `json:"started_at"`

		Updated_at time.Time `json:"updated_at"`

		Completed_at any/* CUE disjunction: (null|string) */ `json:"completed_at"`

		// Iteration counter (managed by orchestrator)
		// Used to construct agent ID: {assigned_agent}-{iteration}
		Iteration int64 `json:"iteration"`

		// Context file paths (relative to .sow/)
		// Compiled by orchestrator during context preparation
		References []string `json:"references"`

		// Human feedback/corrections
		Feedback []Feedback `json:"feedback"`

		// Files modified during task execution
		// Auto-populated by worker via 'sow log' command
		Files_modified []string `json:"files_modified"`
	} `json:"task"`
}

// Feedback represents human corrections/guidance
type Feedback struct {
	// Feedback ID (001, 002, 003...)
	Id string `json:"id"`

	// When feedback was provided
	Created_at time.Time `json:"created_at"`

	// Feedback status
	Status string `json:"status"`
}
