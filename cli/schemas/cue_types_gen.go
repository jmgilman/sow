// Code generated by "cue exp gengotypes"; DO NOT EDIT.

package schemas

import (
	"github.com/jmgilman/sow/cli/schemas/phases"
	"github.com/jmgilman/sow/cli/schemas/projects"
	"time"
)

// BreakdownIndex defines the schema for breakdown mode index files at:
// .sow/breakdown/index.yaml
//
// This tracks input sources and work units for breaking down designs into GitHub issues.
type BreakdownIndex struct {
	// Breakdown session metadata
	Breakdown struct {
		// Topic being broken down (human-readable)
		Topic string `json:"topic"`

		// Git branch name for this breakdown session
		Branch string `json:"branch"`

		// When this breakdown session was created
		Created_at time.Time `json:"created_at"`

		// Breakdown session status
		Status string `json:"status"`
	} `json:"breakdown"`

	// Input sources for this breakdown session
	Inputs []BreakdownInput `json:"inputs"`

	// Work units to be created as GitHub issues
	Work_units []BreakdownWorkUnit `json:"work_units"`
}

// BreakdownInput represents an input source for the breakdown process
type BreakdownInput struct {
	// Input type
	Type string `json:"type"`

	// Path, glob pattern, directory, or identifier
	Path string `json:"path"`

	// Brief description of what this input provides
	Description string `json:"description"`

	// Optional tags for organization
	Tags []string `json:"tags,omitempty"`

	// When this input was added
	Added_at time.Time `json:"added_at"`
}

// BreakdownWorkUnit represents a unit of work to be created as a GitHub issue
type BreakdownWorkUnit struct {
	// Unique identifier for this work unit (e.g., "unit-001")
	Id string `json:"id"`

	// Title of the work unit (will be GitHub issue title)
	Title string `json:"title"`

	// Brief description of the work unit
	Description string `json:"description"`

	// Path to the detailed markdown document (relative to .sow/breakdown/)
	Document_path string `json:"document_path,omitempty"`

	// Work unit status
	Status string `json:"status"`

	// IDs of work units this depends on
	Depends_on []string `json:"depends_on,omitempty"`

	// GitHub issue URL (set after publishing)
	Github_issue_url string `json:"github_issue_url,omitempty"`

	// GitHub issue number (set after publishing)
	Github_issue_number int64 `json:"github_issue_number,omitempty"`

	// When this work unit was created
	Created_at time.Time `json:"created_at"`

	// When this work unit was last updated
	Updated_at time.Time `json:"updated_at"`
}

// Config defines the schema for the sow configuration file at:
// .sow/config.yaml
//
// This allows teams to customize where formal artifacts are stored.
type Config struct {
	// Artifact storage locations
	// All paths are relative to repository root
	Artifacts *struct {
		// Where to store Architecture Decision Records
		// Default: ".sow/knowledge/adrs"
		Adrs *string `json:"adrs,omitempty"`

		// Where to store design documents
		// Default: ".sow/knowledge/design"
		Design_docs *string `json:"design_docs,omitempty"`
	} `json:"artifacts,omitempty"`
}

// DesignIndex defines the schema for design mode index files at:
// .sow/design/index.yaml
//
// This tracks input sources and planned outputs for active design work.
type DesignIndex struct {
	// Design session metadata
	Design struct {
		// Topic being designed (human-readable)
		Topic string `json:"topic"`

		// Git branch name for this design session
		Branch string `json:"branch"`

		// When this design session was created
		Created_at time.Time `json:"created_at"`

		// Design session status
		Status string `json:"status"`
	} `json:"design"`

	// Input sources for this design session
	Inputs []DesignInput `json:"inputs"`

	// Output documents produced by this design session
	Outputs []DesignOutput `json:"outputs"`
}

// DesignInput represents an input source for the design process
type DesignInput struct {
	// Input type
	Type string `json:"type"`

	// Path, glob pattern, directory, or identifier
	Path string `json:"path"`

	// Brief description of what this input provides
	Description string `json:"description"`

	// Optional tags for organization
	Tags []string `json:"tags,omitempty"`

	// When this input was added
	Added_at time.Time `json:"added_at"`
}

// DesignOutput represents a design document to be produced
type DesignOutput struct {
	// Path relative to .sow/design/
	Path string `json:"path"`

	// Brief description of the document
	Description string `json:"description"`

	// Target location for this specific document when finalized
	Target_location string `json:"target_location"`

	// Document type (for organization)
	Type string `json:"type,omitempty"`

	// Optional tags
	Tags []string `json:"tags,omitempty"`

	// When this output was added to the index
	Added_at time.Time `json:"added_at"`
}

// ExplorationIndex defines the schema for exploration index files at:
// .sow/exploration/index.yaml
//
// This tracks files and metadata for active exploration work.
type ExplorationIndex struct {
	// Exploration metadata
	Exploration struct {
		// Topic being explored (human-readable)
		Topic string `json:"topic"`

		// Git branch name for this exploration
		Branch string `json:"branch"`

		// When this exploration was created
		Created_at time.Time `json:"created_at"`

		// Exploration status
		Status string `json:"status"`
	} `json:"exploration"`

	// Topics "parking lot" - research areas agreed upon but not yet explored
	Topics []ExplorationTopic `json:"topics"`

	// Session journal - chronological log for zero-context recovery
	Journal []JournalEntry `json:"journal"`

	// Files in this exploration
	Files []ExplorationFile `json:"files"`
}

// ExplorationTopic represents a research topic in the parking lot
type ExplorationTopic struct {
	// Topic description
	Topic string `json:"topic"`

	// Topic status
	Status string `json:"status"`

	// When this topic was added
	Added_at time.Time `json:"added_at"`

	// When this topic was completed (optional)
	Completed_at time.Time `json:"completed_at,omitempty"`

	// Files created for this topic (optional)
	Related_files []string `json:"related_files,omitempty"`

	// Optional brief notes
	Notes string `json:"notes,omitempty"`
}

// JournalEntry represents a chronological log entry for session memory
type JournalEntry struct {
	// When this entry was created
	Timestamp time.Time `json:"timestamp"`

	// Entry type for categorization
	Type string `json:"type"`

	// Entry content
	Content string `json:"content"`
}

// ExplorationFile represents a file in the exploration workspace
type ExplorationFile struct {
	// Path relative to .sow/exploration/
	Path string `json:"path"`

	// Brief description of file contents
	Description string `json:"description"`

	// Keywords for discoverability
	Tags []string `json:"tags"`

	// When this file was created
	Created_at time.Time `json:"created_at"`
}

// KnowledgeIndex defines the schema for the knowledge index at:
// .sow/knowledge/index.yaml
//
// This tracks permanent artifacts and their metadata.
type KnowledgeIndex struct {
	// Exploration summaries
	Explorations []ExplorationSummary `json:"explorations"`

	// ADR references (if stored in .sow/knowledge/adrs/)
	Adrs []ArtifactReference `json:"adrs,omitempty"`

	// Design document references (if stored in .sow/knowledge/design/)
	Design_docs []ArtifactReference `json:"design_docs,omitempty"`
}

// ExplorationSummary represents a completed exploration
type ExplorationSummary struct {
	// Exploration topic
	Topic string `json:"topic"`

	// Path to summary document (relative to .sow/knowledge/explorations/)
	Summary_path string `json:"summary_path"`

	// Original exploration branch
	Branch string `json:"branch"`

	// When exploration was completed
	Completed_at time.Time `json:"completed_at"`

	// Tags for discoverability
	Tags []string `json:"tags"`
}

// ArtifactReference represents a reference to a permanent artifact
type ArtifactReference struct {
	// Path to artifact (relative to .sow/knowledge/)
	Path string `json:"path"`

	// Brief description
	Description string `json:"description"`

	// When artifact was created
	Created_at time.Time `json:"created_at"`

	// Tags for discoverability
	Tags []string `json:"tags"`
}

// Re-export project types for backward compatibility
// This ensures existing code importing schemas.ProjectState continues to work
type ProjectState projects.ProjectState

// RefsCacheIndex defines the schema for ~/.cache/sow/index.json
//
// This is the cache index containing transient metadata about cached
// references. Stored per-machine, not committed to git.
type RefsCacheIndex struct {
	// Schema version (semantic versioning)
	Version string `json:"version"`

	// Cached reference metadata
	Refs []CachedRef `json:"refs"`
}

// CachedRef represents a cached reference
type CachedRef struct {
	// Reference ID (matches ID from committed or local index)
	Id string `json:"id"`

	// Type inferred from source URL (stored for quick lookup)
	Type string `json:"type"`

	// Absolute cache path (e.g., /Users/josh/.cache/sow/refs/git/abc123/)
	Cache_path string `json:"cache_path"`

	// Last updated timestamp
	Last_updated time.Time `json:"last_updated"`

	// Repositories using this cached ref
	Used_by []CacheUsage `json:"used_by"`

	// Type-specific metadata
	Metadata CacheMetadata `json:"metadata"`
}

// CacheUsage represents a repository using this cached ref
type CacheUsage struct {
	// Absolute path to consuming repository
	Repo_path string `json:"repo_path"`

	// How the cache is linked (symlink on Unix, copy on Windows)
	Link_type string `json:"link_type"`

	// Link name in the consuming repo's .sow/refs/ directory
	Link_name string `json:"link_name"`
}

// CacheMetadata is polymorphic based on type
type CacheMetadata struct {
	// Git type metadata
	Git GitMetadata `json:"git,omitempty"`

	// File type metadata
	File FileMetadata `json:"file,omitempty"`
}

// GitMetadata contains git-specific cache data
type GitMetadata struct {
	// Current local commit SHA
	Commit_sha string `json:"commit_sha"`

	// Latest remote commit SHA (updated on status check)
	Remote_sha string `json:"remote_sha,omitempty"`

	// Last time remote was checked
	Last_checked time.Time `json:"last_checked,omitempty"`

	// Staleness status
	Status string `json:"status"`

	// Number of commits behind remote (0 if current)
	Commits_behind int64 `json:"commits_behind"`
}

// FileMetadata contains file-specific cache data
type FileMetadata struct {
}

// RefsCommittedIndex defines the schema for .sow/refs/index.json
//
// This is the committed index containing categorical metadata about
// refs, shared with the team via git. Contains configuration
// but not transient data like SHAs or timestamps.
type RefsCommittedIndex struct {
	// Schema version (semantic versioning)
	Version string `json:"version"`

	// Reference definitions
	Refs []Ref `json:"refs"`
}

// Ref represents a reference to external content
type Ref struct {
	// Unique identifier (auto-generated)
	Id string `json:"id"`

	// Source URL with scheme that determines type
	// Examples:
	//   - git+https://github.com/org/repo
	//   - git+ssh://git@github.com/org/repo
	//   - git@github.com:org/repo (auto-converted to git+ssh://)
	//   - file:///absolute/path
	Source string `json:"source"`

	// Semantic type (what the content represents)
	Semantic string `json:"semantic"`

	// Symlink name in .sow/refs/
	Link string `json:"link"`

	// Topic keywords for categorization
	Tags []string `json:"tags"`

	// One-sentence description
	Description string `json:"description"`

	// 2-3 sentence summary (optional)
	Summary string `json:"summary"`

	// Type-specific configuration
	// Structure depends on URL scheme
	Config RefConfig `json:"config"`
}

// RefConfig is a polymorphic config structure
// Validation depends on the source URL scheme
type RefConfig struct {
	// Git type config (for git+https://, git+ssh://, git@ URLs)
	// Branch name (optional, defaults to repo default)
	Branch string `json:"branch,omitempty"`

	// Subpath within repository (optional, defaults to root)
	// Use "" or omit for root
	//
	// Future type configs would be added here
	// For example, web type:
	// scrape_depth?: int & >=1
	// follow_links?: bool
	Path string `json:"path,omitempty"`
}

// RefsLocalIndex defines the schema for .sow/refs/index.local.json
//
// This is the local-only index for references that should not be
// shared with the team (e.g., work-in-progress docs, personal notes).
// This file is git-ignored.
//
// Note: File refs are typically added as local refs since they
// reference paths on the local machine.
type RefsLocalIndex struct {
	// Schema version (semantic versioning)
	Version string `json:"version"`

	// Local reference definitions
	// Uses same structure as committed refs
	Refs []Ref `json:"refs"`
}

type StandardProjectState projects.StandardProjectState

// Re-export common types
type Phase phases.Phase

type Artifact phases.Artifact

type Task phases.Task

// TaskState defines the schema for task state files at:
// .sow/project/phases/implementation/tasks/<id>/state.yaml
//
// This tracks metadata for individual implementation tasks.
type TaskState struct {
	Task struct {
		// Task ID (matches directory name, gap-numbered)
		Id string `json:"id"`

		// Task name
		Name string `json:"name"`

		// Always "implementation" in the 5-phase model
		Phase string `json:"phase"`

		// Task execution status
		Status string `json:"status"`

		// Timestamps
		Created_at time.Time `json:"created_at"`

		Started_at *time.Time `json:"started_at,omitempty"`

		Updated_at time.Time `json:"updated_at"`

		Completed_at *time.Time `json:"completed_at,omitempty"`

		// Iteration counter (managed by orchestrator)
		// Used to construct agent ID: {assigned_agent}-{iteration}
		Iteration int64 `json:"iteration"`

		// Agent assigned to this task (e.g., "implementer", "architect")
		// Used to construct agent ID: {assigned_agent}-{iteration}
		Assigned_agent string `json:"assigned_agent"`

		// Context file paths (relative to .sow/)
		// Compiled by orchestrator during context preparation
		References []string `json:"references"`

		// Human feedback/corrections
		Feedback []Feedback `json:"feedback"`

		// Files modified during task execution
		// Auto-populated by worker via 'sow log' command
		Files_modified []string `json:"files_modified"`
	} `json:"task"`
}

// Feedback represents human corrections/guidance
type Feedback struct {
	// Feedback ID (001, 002, 003...)
	Id string `json:"id"`

	// When feedback was provided
	Created_at time.Time `json:"created_at"`

	// Feedback status
	Status string `json:"status"`
}
