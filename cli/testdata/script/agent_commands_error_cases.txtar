# Test: Agent Commands Error Cases
# Purpose: Test error handling and validation
# Coverage: Missing project, wrong phase operations, invalid values, missing requirements

# =====================================
# Setup
# =====================================
exec git init
exec git config user.email 'test@example.com'
exec git config user.name 'Test User'
exec git commit --allow-empty -m 'Initial commit'
exec git checkout -b feat/error-test
exec sow init

# =====================================
# Error: Commands Without Active Project
# =====================================

# Complete without project
! exec sow agent complete
stderr 'no active project'

# Status without project
! exec sow agent status
stderr 'no active project'

# Artifact operations without project
! exec sow agent artifact add some-file.md
stderr 'no active project'

! exec sow agent artifact approve some-file.md
stderr 'no active project'

# Task operations without project
! exec sow agent task add 'Task name' --description 'Desc'
stderr 'no active project'

# Set without project
! exec sow agent set field value
stderr 'no active project'

# =====================================
# Create Project for Phase-Specific Tests
# =====================================

exec sow agent init error-test --description 'Test error cases'

# =====================================
# Error: Wrong Phase Operations
# =====================================

# Try task operations in planning phase
! exec sow agent task add 'Task' --description 'Desc'
stderr 'does not support tasks'

! exec sow agent task approve
stderr 'does not support task approval'

# Transition to implementation
exec mkdir -p .sow/project/artifacts
exec sh -c 'echo "# Tasks" > .sow/project/artifacts/tasks.md'
exec sow agent artifact add project/artifacts/tasks.md --metadata type=task_list
exec sow agent artifact approve project/artifacts/tasks.md
exec sow agent complete

# Try artifact operations in implementation phase
! exec sow agent artifact add some-artifact.md
stderr 'does not support artifacts'

! exec sow agent artifact approve some-artifact.md
stderr 'does not support artifacts'

# =====================================
# Error: Invalid Task Status
# =====================================

exec sow agent task add 'Test task' --description 'Test'
exec sow agent task approve

# Try invalid status
! exec sow agent task update 010 --status invalid_status
stderr 'invalid status'

# Try non-existent status
! exec sow agent task update 010 --status running
stderr 'invalid status'

# =====================================
# Error: Task Not Found
# =====================================

# Try to update non-existent task
! exec sow agent task update 999 --status completed
stderr 'not found'

# Try to get state of non-existent task
! exec sow agent task status 999
stderr 'not found'

# Try feedback on non-existent task
! exec sow agent task feedback add 999 'Some feedback'
stderr 'not found'

# =====================================
# Error: Missing Required Flags
# =====================================

# Task add without description
! exec sow agent task add 'Task name'
stderr 'required'

# Log without action
! exec sow agent log --result 'Result'
stderr 'required'

# Log without result
! exec sow agent log --action 'Action'
stderr 'required'

# =====================================
# Error: Invalid Artifact Path
# =====================================

# Transition to review for artifact testing
exec sow agent task update 010 --status completed

# Try to approve non-existent artifact
! exec sow agent artifact approve project/non-existent.md
stderr 'not found'

# =====================================
# Error: Completion Without Requirements
# =====================================

# Reset to test planning completion requirements
exec sow agent delete --force
exec sow agent init completion-test --description 'Test completion requirements'

# Try to complete planning without task list
! exec sow agent complete
stderr 'task list artifact must be approved'

# Add task list but don't approve
exec mkdir -p .sow/project/artifacts
exec sh -c 'echo "# Tasks" > .sow/project/artifacts/tasks.md'
exec sow agent artifact add project/artifacts/tasks.md --metadata type=task_list

# Still should fail
! exec sow agent complete
stderr 'task list artifact must be approved'

# =====================================
# Error: Invalid Metadata Values
# =====================================

# Metadata values are loosely typed, but test that command accepts various types
exec sow agent artifact approve project/artifacts/tasks.md
exec sow agent complete

# Set accepts various types - these should all work
exec sow agent set string_field 'value'
exec sow agent set int_field 123
exec sow agent set bool_field true

# Verify all set correctly
exec cat .sow/project/state.yaml
stdout 'string_field: value'
stdout 'int_field: 123'
stdout 'bool_field: true'

# =====================================
# Error: Task State Operations on Non-Existent Task
# =====================================

exec sow agent task add 'State test task' --description 'Test'
exec sow agent task approve

! exec sow agent task state add-file 999 file.go
stderr 'not found'

! exec sow agent task state increment 999
stderr 'not found'

! exec sow agent task state set-agent 999 architect
stderr 'not found'

# =====================================
# Error: Feedback Operations on Non-Existent Feedback
# =====================================

exec sow agent task feedback add 'Some feedback' 010

# Try to mark non-existent feedback as addressed
! exec sow agent task feedback mark-addressed 010 999
stderr 'not found'

# =====================================
# Error: Delete Non-Existent Project
# =====================================

# Complete and delete current project
exec sow agent task update 010 --status completed
exec sow agent delete --force

# Try to delete again
! exec sow agent delete
stderr 'no active project'

# =====================================
# Error: Init Without Required Arguments
# =====================================

# Try to init without name
! exec sow agent init
stderr 'required'

# Try to init without description and not using issue
! exec sow agent init test-project
stderr 'required'

# =====================================
# Error: Init On Protected Branch
# =====================================

# Switch to main branch
exec git checkout -b main

# Try to init (should fail on protected branch)
! exec sow agent init protected-test --description 'Should fail'
stderr 'protected branch'

# Switch back
exec git checkout feat/error-test

# =====================================
# Error: Multiple Projects
# =====================================

# Create a project
exec sow agent init multi-test --description 'First project'

# Try to create another (should fail)
! exec sow agent init another-test --description 'Second project'
stderr 'already exists'

# =====================================
# Cleanup
# =====================================
exec sow agent delete --force
! exists .sow/project
