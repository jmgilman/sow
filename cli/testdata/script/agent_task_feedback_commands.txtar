# Test: Agent Task Feedback Commands
# Purpose: Test task feedback workflow
# Coverage: task feedback add, task feedback mark-addressed

# =====================================
# Setup
# =====================================
exec git init
exec git config user.email 'test@example.com'
exec git config user.name 'Test User'
exec git commit --allow-empty -m 'Initial commit'
exec git checkout -b feat/feedback-test
exec sow init
exec sow agent init feedback-test --description 'Test feedback commands'

# Transition to implementation and create task
exec mkdir -p .sow/project/artifacts
exec sh -c 'echo "# Tasks" > .sow/project/artifacts/tasks.md'
exec sow agent artifact add project/artifacts/tasks.md --metadata type=task_list
exec sow agent artifact approve project/artifacts/tasks.md
exec sow agent complete
exec sow agent task add 'Implementation task' --description 'Task needing feedback'
exec sow agent task approve

# =====================================
# Task Feedback Add Command
# =====================================

# Add first feedback
exec sow agent task feedback add 'Use RS256 instead of HS256 for JWT signing' 010
stderr '✓ Created feedback'

# Verify feedback file created
exists .sow/project/phases/implementation/tasks/010/feedback
exists .sow/project/phases/implementation/tasks/010/feedback/001.md

# Verify feedback content
exec cat .sow/project/phases/implementation/tasks/010/feedback/001.md
stdout 'Use RS256 instead of HS256 for JWT signing'

# Verify feedback tracked in task state
exec cat .sow/project/phases/implementation/tasks/010/state.yaml
stdout 'feedback:'
stdout 'id: "001"'
stdout 'status: pending'

# Add second feedback
exec sow agent task feedback add 'Add input validation for email field' 010
stderr '✓ Created feedback'

# Verify second feedback file
exists .sow/project/phases/implementation/tasks/010/feedback/002.md
exec cat .sow/project/phases/implementation/tasks/010/feedback/002.md
stdout 'Add input validation for email field'

# Verify both feedbacks in task state
exec cat .sow/project/phases/implementation/tasks/010/state.yaml
stdout 'id: "001"'
stdout 'status: pending'
stdout 'id: "002"'

# Add third feedback
exec sow agent task feedback add 'Improve error handling in auth middleware' 010

# =====================================
# Task Feedback Mark-Addressed Command
# =====================================

# Mark first feedback as addressed
exec sow agent task feedback mark-addressed 001 010
stderr '✓ Marked feedback 001 as addressed'

# Verify feedback 001 marked addressed
exec cat .sow/project/phases/implementation/tasks/010/state.yaml
stdout 'id: "001"'
stdout 'status: addressed'

# Verify other feedbacks still pending
exec cat .sow/project/phases/implementation/tasks/010/state.yaml
stdout 'id: "002"'
stdout 'status: pending'
stdout 'id: "003"'

# Mark third feedback as addressed
exec sow agent task feedback mark-addressed 003 010
stderr '✓ Marked feedback 003 as addressed'

exec cat .sow/project/phases/implementation/tasks/010/state.yaml
stdout 'id: "003"'
stdout 'status: addressed'

# Mark remaining feedback
exec sow agent task feedback mark-addressed 002 010

# Verify all feedbacks addressed
exec cat .sow/project/phases/implementation/tasks/010/state.yaml
stdout 'id: "001"'
stdout 'status: addressed'
stdout 'id: "002"'
stdout 'status: addressed'
stdout 'id: "003"'
stdout 'status: addressed'

# =====================================
# Test Feedback Increments Iteration
# =====================================

# Initial iteration should be 1
exec cat .sow/project/phases/implementation/tasks/010/state.yaml
stdout 'iteration: 1'

# Adding feedback creates new feedback entry
exec sow agent task feedback add 'One more change needed' 010
stderr '✓ Created feedback'

# Verify feedback was added
exec cat .sow/project/phases/implementation/tasks/010/state.yaml
stdout 'id: "004"'

# =====================================
# Test Multiple Tasks Have Separate Feedback
# =====================================

# Add second task
exec sow agent task add 'Second task' --description 'Another task'

# Add feedback to second task
exec sow agent task feedback add 'Refactor this function' 020

# Verify second task has own feedback
exists .sow/project/phases/implementation/tasks/020/feedback/001.md
exec cat .sow/project/phases/implementation/tasks/020/feedback/001.md
stdout 'Refactor this function'

# Verify first task feedback unchanged
exec cat .sow/project/phases/implementation/tasks/010/state.yaml
stdout 'id: "004"'

exec cat .sow/project/phases/implementation/tasks/020/state.yaml
stdout 'id: "001"'
! stdout 'id: "004"'

# =====================================
# Cleanup
# =====================================
exec sow agent task update 010 --status completed
exec sow agent task update 020 --status completed
exec sow agent delete --force
! exists .sow/project
