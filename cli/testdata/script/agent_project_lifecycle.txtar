# Test: Agent Project Lifecycle
# Purpose: Test project initialization and deletion
# Coverage: init command, delete command, filesystem state

# =====================================
# Setup
# =====================================
exec git init
exec git config user.email 'test@example.com'
exec git config user.name 'Test User'
exec git commit --allow-empty -m 'Initial commit'
exec git checkout -b feat/project-lifecycle
exec sow init

# =====================================
# Project Initialization - Basic
# =====================================

# Verify no project exists initially
! exists .sow/project

# Initialize project
exec sow agent init my-project --description 'My test project'
stderr '✓ Initialized project'
stderr 'my-project'
stderr 'feat/project-lifecycle'

# Verify project directory structure created
exists .sow/project
exists .sow/project/state.yaml
exists .sow/project/log.md
exists .sow/project/context

# Verify project state initialized correctly
exec cat .sow/project/state.yaml
stdout 'name: my-project'
stdout 'description: My test project'
stdout 'branch: feat/project-lifecycle'
stdout 'current_state: PlanningActive'
stdout 'type: standard'

# Verify phases structure
exec cat .sow/project/state.yaml
stdout 'planning:'
stdout 'enabled: true'
stdout 'status: in_progress'
stdout 'implementation:'
stdout 'review:'
stdout 'finalize:'

# Verify project log created
exists .sow/project/log.md

# =====================================
# Project Initialization - Validation
# =====================================

# Try to create another project (should fail)
! exec sow agent init another-project --description 'Should fail'
stderr 'already exists'

# =====================================
# Project Deletion - With Force Flag
# =====================================

# Delete with force (no confirmation)
exec sow agent delete --force
stderr 'Deleted project'
stderr 'my-project'

# Verify project directory removed
! exists .sow/project

# Verify .sow directory still exists (sow still initialized)
exists .sow
exists .sow/config.yaml

# =====================================
# Project Initialization - Different Name and Description
# =====================================

# Can create new project after deletion
exec sow agent init feature-auth --description 'Add JWT authentication system'
stderr '✓ Initialized project'

exists .sow/project
exec cat .sow/project/state.yaml
stdout 'name: feature-auth'
stdout 'description: Add JWT authentication system'

# =====================================
# Project Lifecycle - Full Workflow
# =====================================

# Run through a complete workflow to verify lifecycle
exec mkdir -p .sow/project/artifacts
exec sh -c 'echo "# Tasks" > .sow/project/artifacts/tasks.md'
exec sow agent artifact add project/artifacts/tasks.md --metadata type=task_list
exec sow agent artifact approve project/artifacts/tasks.md
exec sow agent complete

# Verify project state updated
exec cat .sow/project/state.yaml
stdout 'current_state: ImplementationPlanning'
stdout 'planning:'
stdout 'status: completed'
stdout 'completed_at:'

# Add tasks
exec sow agent task add 'Implement JWT' --description 'Core JWT implementation'
exec sow agent task approve
exec sow agent task update 010 --status completed

# Verify implementation phase completed
exec cat .sow/project/state.yaml
stdout 'current_state: ReviewActive'

# Complete review
exec mkdir -p .sow/project/phases/review/reports
exec sh -c 'echo "# Review" > .sow/project/phases/review/reports/001.md'
exec sow agent artifact add project/phases/review/reports/001.md --metadata type=review --metadata assessment=pass
exec sow agent artifact approve project/phases/review/reports/001.md
exec sow agent complete

# Verify in finalize
exec cat .sow/project/state.yaml
stdout 'current_state: FinalizeDocumentation'

# Complete finalize
exec sow agent complete

# Verify all phases completed
exec cat .sow/project/state.yaml
stdout 'planning:'
stdout 'status: completed'
stdout 'implementation:'
stdout 'status: completed'
stdout 'review:'
stdout 'status: completed'
stdout 'finalize:'
stdout 'status: completed'

# =====================================
# Project Deletion - After Complete Workflow
# =====================================

# Delete completed project
exec sow agent delete --force
stderr 'Deleted project'

! exists .sow/project

# =====================================
# Project Initialization - Edge Cases
# =====================================

# Test with long description
exec sow agent init test-long --description 'This is a very long description that contains multiple words and explains in detail what this project is about and what it aims to achieve through its implementation'
stderr '✓ Initialized project'

exec cat .sow/project/state.yaml
stdout 'This is a very long description'

exec sow agent delete --force

# Test with special characters in name (should work with valid chars)
exec sow agent init test-feature-2024 --description 'Test special chars'
stderr '✓ Initialized project'

exec cat .sow/project/state.yaml
stdout 'name: test-feature-2024'

exec sow agent delete --force

# Test with minimal name
exec sow agent init a --description 'Minimal name'
stderr '✓ Initialized project'

exec cat .sow/project/state.yaml
stdout 'name: a'

# =====================================
# Project State Persistence
# =====================================

# Verify state persists across operations
exec mkdir -p .sow/project/artifacts
exec sh -c 'echo "# Tasks" > .sow/project/artifacts/tasks.md'
exec sow agent artifact add project/artifacts/tasks.md --metadata type=task_list

# Read state file
exec cat .sow/project/state.yaml
stdout 'tasks.md'

# Modify state through approval
exec sow agent artifact approve project/artifacts/tasks.md

# Verify modification persisted
exec cat .sow/project/state.yaml
stdout 'approved: true'

# =====================================
# Final Cleanup
# =====================================

exec sow agent delete --force
! exists .sow/project

# Verify sow validate still works
exec sow validate
stderr '✓ All validations passed'
