# Test: Agent Task State Commands
# Purpose: Test task state manipulation commands
# Coverage: task state add-file, add-reference, increment, set-agent

# =====================================
# Setup
# =====================================
exec git init
exec git config user.email 'test@example.com'
exec git config user.name 'Test User'
exec git commit --allow-empty -m 'Initial commit'
exec git checkout -b feat/task-state-test
exec sow init
exec sow agent init task-state-test --description 'Test task state commands'

# Transition to implementation and create task
exec mkdir -p .sow/project/artifacts
exec sh -c 'echo "# Tasks" > .sow/project/artifacts/tasks.md'
exec sow agent artifact add project/artifacts/tasks.md --metadata type=task_list
exec sow agent artifact approve project/artifacts/tasks.md
exec sow agent complete
exec sow agent task add 'Test task' --description 'Task for state testing'
exec sow agent task approve

# =====================================
# Task State Add-File Command
# =====================================

# Add files to task state
exec sow agent task state add-file src/main.go 010
stderr '✓ Added modified file'

exec sow agent task state add-file src/utils.go 010
exec sow agent task state add-file tests/main_test.go 010

# Verify files added to task state
exec cat .sow/project/phases/implementation/tasks/010/state.yaml
stdout 'files_modified:'
stdout '- src/main.go'
stdout '- src/utils.go'
stdout '- tests/main_test.go'

# =====================================
# Task State Add-Reference Command
# =====================================

# Add knowledge references
exec sow agent task state add-reference .sow/knowledge/architecture/design.md 010
stderr '✓ Added reference'

exec sow agent task state add-reference .sow/refs/style-guide/golang.md 010

# Verify references added to task state
exec cat .sow/project/phases/implementation/tasks/010/state.yaml
stdout 'references:'
stdout '- .sow/knowledge/architecture/design.md'
stdout '- .sow/refs/style-guide/golang.md'

# =====================================
# Task State Set-Agent Command
# =====================================

# Initial agent should be implementer (default)
exec cat .sow/project/phases/implementation/tasks/010/state.yaml
stdout 'assigned_agent: implementer'

# Change agent to architect
exec sow agent task state set-agent architect 010
stderr '✓ Updated assigned agent'

# Verify agent changed in task state
exec cat .sow/project/phases/implementation/tasks/010/state.yaml
stdout 'assigned_agent: architect'

# Change to custom agent
exec sow agent task state set-agent custom-reviewer 010

exec cat .sow/project/phases/implementation/tasks/010/state.yaml
stdout 'assigned_agent: custom-reviewer'

# =====================================
# Task State Increment Command
# =====================================

# Initial iteration should be 1
exec cat .sow/project/phases/implementation/tasks/010/state.yaml
stdout 'iteration: 1'

# Increment iteration
exec sow agent task state increment 010
stderr '✓ Incremented iteration'

# Verify iteration incremented
exec cat .sow/project/phases/implementation/tasks/010/state.yaml
stdout 'iteration: 2'

# Increment again
exec sow agent task state increment 010

exec cat .sow/project/phases/implementation/tasks/010/state.yaml
stdout 'iteration: 3'

# =====================================
# Test State Persistence Across Commands
# =====================================

# Verify all state changes are preserved together
exec cat .sow/project/phases/implementation/tasks/010/state.yaml
stdout 'iteration: 3'
stdout 'assigned_agent: custom-reviewer'
stdout 'files_modified:'
stdout '- src/main.go'
stdout 'references:'
stdout '- .sow/knowledge/architecture/design.md'

# =====================================
# Test With Multiple Tasks
# =====================================

# Add another task
exec sow agent task add 'Second task' --description 'Another task'

# Modify second task state
exec sow agent task state add-file src/feature.go 020
exec sow agent task state increment 020

# Verify first task state unchanged
exec cat .sow/project/phases/implementation/tasks/010/state.yaml
stdout 'iteration: 3'
stdout 'src/main.go'

# Verify second task state correct
exec cat .sow/project/phases/implementation/tasks/020/state.yaml
stdout 'iteration: 2'
stdout 'src/feature.go'
! stdout 'src/main.go'

# =====================================
# Cleanup
# =====================================
exec sow agent task update 010 --status completed
exec sow agent task update 020 --status completed
exec sow agent delete --force
! exists .sow/project
