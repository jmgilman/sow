# Test project phase status command
# Should display phase status in text and JSON formats

exec git init
exec git config user.email 'test@example.com'
exec git config user.name 'Test User'
exec git commit --allow-empty -m 'Initial commit'
exec git checkout -b feat/test-feature
exec sow init
exec sow project init my-feature --description 'Add new feature'

# Test default (text) output
exec sow project phase status
stderr 'Phases:'
stderr '\[enabled\] Phase'
stderr 'Discovery.*skipped'
stderr 'Design.*skipped'
stderr 'Implementation.*pending'
stderr 'Review.*pending'
stderr 'Finalize.*pending'

# Discovery and design should not be enabled (no checkmark)
stderr '\[ \] Discovery'
stderr '\[ \] Design'
# Implementation, review, finalize should be enabled (checkmark)
stderr '\[✓\] Implementation'
stderr '\[✓\] Review'
stderr '\[✓\] Finalize'

# Test text output explicitly
exec sow project phase status --format text
stderr 'Phases:'

# Test JSON output
exec sow project phase status --format json
stderr '"discovery"'
stderr '"design"'
stderr '"implementation"'
stderr '"review"'
stderr '"finalize"'
stderr '"enabled": false'
stderr '"enabled": true'
stderr '"status": "pending"'
stderr '"status": "skipped"'

# Enable discovery and design phases
exec sow project phase enable discovery --type feature
exec sow project phase enable design

# Test status after enabling phases
exec sow project phase status
stderr '\[✓\] Discovery.*pending'
stderr '\[✓\] Design.*pending'

# Test JSON output with enabled phases
exec sow project phase status --format json
stderr '"discovery"'
stderr '"enabled": true'

# Test invalid format
! exec sow project phase status --format invalid
stderr 'invalid format'
