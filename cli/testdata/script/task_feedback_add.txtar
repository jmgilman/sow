# Test task feedback add command
# Should create feedback entry and file

exec git init
exec git config user.email 'test@example.com'
exec git config user.name 'Test User'
exec git commit --allow-empty -m 'Initial commit'
exec git checkout -b feat/test-feature
exec sow init
exec sow project init my-feature --description 'Add new feature'

# Add a task
exec sow task add 'Add authentication' --description 'Implement JWT auth'
stderr '✓ Created task 010'

# Verify no feedback initially
exec cat .sow/project/phases/implementation/tasks/010/state.yaml
stdout 'feedback: \[\]'

# Add first feedback
exec sow task feedback add 'Use RS256 instead of HS256' 010
stderr '✓ Created feedback 001'
stderr 'Feedback file: .sow/project/phases/implementation/tasks/010/feedback/001.md'

# Verify feedback was added to state
exec cat .sow/project/phases/implementation/tasks/010/state.yaml
stdout 'id: "001"'
stdout 'status: pending'

# Verify feedback file was created
exists .sow/project/phases/implementation/tasks/010/feedback/001.md
exec cat .sow/project/phases/implementation/tasks/010/feedback/001.md
stdout '# Feedback 001'
stdout 'pending'
stdout 'Use RS256 instead of HS256'

# Verify iteration is still 1 (not auto-incremented)
exec cat .sow/project/phases/implementation/tasks/010/state.yaml
stdout 'iteration: 1'

# Add second feedback with auto-increment
exec sow task feedback add 'Add error handling for expired tokens' 010 --increment-iteration
stderr '✓ Created feedback 002'
stderr 'Iteration: 1 → 2'

# Verify iteration was incremented
exec cat .sow/project/phases/implementation/tasks/010/state.yaml
stdout 'iteration: 2'

# Verify second feedback file exists
exists .sow/project/phases/implementation/tasks/010/feedback/002.md
exec cat .sow/project/phases/implementation/tasks/010/feedback/002.md
stdout '# Feedback 002'
stdout 'Add error handling for expired tokens'

# Add third feedback
exec sow task feedback add 'Follow PEP 8 style guide' 010
stderr '✓ Created feedback 003'

# Verify all three feedback items in state
exec cat .sow/project/phases/implementation/tasks/010/state.yaml
stdout 'id: "001"'
stdout 'id: "002"'
stdout 'id: "003"'

# Test with non-existent task
! exec sow task feedback add 'Test message' 099
stderr 'not found'

# Verify state validates
exec sow validate
stderr '✓ All validations passed'
