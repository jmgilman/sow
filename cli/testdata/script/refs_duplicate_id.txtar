# Test duplicate ID detection (should fail fast before expensive operations)

# Set HOME to test workspace so cache can be created
env HOME=$WORK

exec git init
exec git config user.email 'test@test.com'
exec git config user.name 'Test'
exec sow init

mkdir source
exec sh -c 'echo test > source/file.txt'

# Add first ref successfully
exec sow refs add $WORK/source --link=test-ref --id=test-ref --semantic=knowledge --description='First ref'
stderr '✓ Added file ref: test-ref'

# Verify it was added to local index (file refs always go to local)
exec cat .sow/refs/index.local.json
stdout '"id": "test-ref"'

# Try adding duplicate with same ID - should fail immediately
! exec sow refs add $WORK/source --link=dup --id=test-ref --semantic=knowledge --description='Duplicate ref'
stderr 'ref with ID "test-ref" already exists'

# Verify cache has only one entry (no orphaned duplicates)
exec sh -c 'ls $HOME/.cache/sow/refs/file/ | wc -l'
stdout '1'

# Verify index still has only one entry
exec cat .sow/refs/index.local.json
stdout '"refs":'
stdout '"id": "test-ref"'
stdout '"source": "file://'

# Try adding a different source with same ID - should also fail
mkdir other-source
exec sh -c 'echo other > other-source/file.txt'
! exec sow refs add $WORK/other-source --link=dup2 --id=test-ref --semantic=code --description='Another duplicate'
stderr 'ref with ID "test-ref" already exists'

# Verify still only one cache entry
exec sh -c 'ls $HOME/.cache/sow/refs/file/ | wc -l'
stdout '1'

# Adding with different ID should succeed
exec sow refs add $WORK/other-source --link=different-ref --id=different-ref --semantic=code --description='Different ref'
stderr '✓ Added file ref: different-ref'

# Verify we now have two entries
exec sh -c 'ls $HOME/.cache/sow/refs/file/ | wc -l'
stdout '2'
