# Test: Standard Project State Machine Transitions
# Purpose: Test state machine edge cases and transition guards
# Coverage: Guard validation, PhaseOperationResult events, multi-task scenarios

# =====================================
# Setup
# =====================================
exec git init
exec git config user.email 'test@example.com'
exec git config user.name 'Test User'
exec git commit --allow-empty -m 'Initial commit'
exec git checkout -b feat/state-machine-test
exec sow init
exec sow agent init state-test --description 'Test state machine transitions'

# =====================================
# Test: Planning Guard - Requires Task List
# =====================================

# Verify in PlanningActive state
exec cat .sow/project/state.yaml
stdout 'current_state: PlanningActive'

# Try to complete without task list (should fail)
! exec sow agent complete
stderr 'task list artifact must be approved'

# Add non-task-list artifact (should still fail)
exec mkdir -p .sow/project/artifacts
exec sh -c 'echo "# Context" > .sow/project/artifacts/context.md'
exec sow agent artifact add project/artifacts/context.md --metadata type=context
exec sow agent artifact approve project/artifacts/context.md

! exec sow agent complete
stderr 'task list artifact must be approved'

# Add task list but don't approve (should still fail)
exec sh -c 'echo "# Tasks" > .sow/project/artifacts/tasks.md'
exec sow agent artifact add project/artifacts/tasks.md --metadata type=task_list

! exec sow agent complete
stderr 'task list artifact must be approved'

# Approve task list (should now succeed)
exec sow agent artifact approve project/artifacts/tasks.md
exec sow agent complete
stderr '✓ Completed planning phase'

# Verify transition
exec cat .sow/project/state.yaml
stdout 'current_state: ImplementationPlanning'

# =====================================
# Test: Implementation Planning -> Executing Transitions
# =====================================

# Transition can happen via task creation OR task approval
# Test both paths in separate scenarios

# Path 1: Task approval triggers transition
exec sow agent task add 'First task' --description 'Test'
stderr '✓ Created task 010'

# Approve tasks to trigger transition
exec sow agent task approve
stderr '✓ Approved task plan'

# Verify transition to ImplementationExecuting
exec cat .sow/project/state.yaml
stdout 'current_state: ImplementationExecuting'

# =====================================
# Test: Multiple Tasks Require ALL Complete
# =====================================

# Add more tasks
exec sow agent task add 'Second task' --description 'Test 2'
exec sow agent task add 'Third task' --description 'Test 3'
exec sow agent task add 'Fourth task' --description 'Test 4'

# Complete some tasks (not all)
exec sow agent task update 010 --status completed
exec sow agent task update 020 --status completed
exec sow agent task update 030 --status in_progress

# Verify still in ImplementationExecuting
exec cat .sow/project/state.yaml
stdout 'current_state: ImplementationExecuting'

# Complete third task but fourth still pending
exec sow agent task update 030 --status completed

exec cat .sow/project/state.yaml
stdout 'current_state: ImplementationExecuting'

# Complete final task - should transition
exec sow agent task update 040 --status completed
stderr 'Transitioning to review'

exec cat .sow/project/state.yaml
stdout 'current_state: ReviewActive'

# =====================================
# Test: Abandoned Tasks Also Count as Complete
# =====================================

# Reset for abandoned task test
exec sow agent delete --force
exec sow agent init abandoned-test --description 'Test abandoned tasks'
exec mkdir -p .sow/project/artifacts
exec sh -c 'echo "# Tasks" > .sow/project/artifacts/tasks.md'
exec sow agent artifact add project/artifacts/tasks.md --metadata type=task_list
exec sow agent artifact approve project/artifacts/tasks.md
exec sow agent complete
exec sow agent task add 'Task A' --description 'Test'
exec sow agent task add 'Task B' --description 'Test'

# Approve tasks first
exec sow agent task approve

# Complete first task
exec sow agent task update 010 --status completed

# Abandon second task - should also trigger transition when it's the last one
exec sow agent task update 020 --status abandoned

# Manually complete implementation phase since abandoned doesn't auto-trigger
exec sow agent complete

# Should now be in review
exec cat .sow/project/state.yaml
stdout 'current_state: ReviewActive'

# =====================================
# Test: Review Guard - Requires Approved Review Artifact
# =====================================

# Try to complete review without review artifact
# Actually review.Complete() doesn't check this, but we can test the workflow

# Add review artifact
exec mkdir -p .sow/project/phases/review/reports
exec sh -c 'echo "# Review Pass" > .sow/project/phases/review/reports/001.md'
exec sow agent artifact add project/phases/review/reports/001.md --metadata type=review --metadata assessment=pass
exec sow agent artifact approve project/phases/review/reports/001.md

# Complete review
exec sow agent complete
stderr '✓ Completed review phase'

# Verify transition to finalize
exec cat .sow/project/state.yaml
stdout 'current_state: FinalizeDocumentation'

# =====================================
# Test: PhaseOperationResult Events Fire Correctly
# =====================================

# Reset for event testing
exec sow agent delete --force
exec sow agent init event-test --description 'Test event firing'
exec mkdir -p .sow/project/artifacts
exec sh -c 'echo "# Tasks" > .sow/project/artifacts/tasks.md'
exec sow agent artifact add project/artifacts/tasks.md --metadata type=task_list

# Artifact approval doesn't fire event (returns NoEvent)
exec sow agent artifact approve project/artifacts/tasks.md
# State should still be PlanningActive
exec cat .sow/project/state.yaml
stdout 'current_state: PlanningActive'

# Complete fires EventCompletePlanning
exec sow agent complete
# State should transition to ImplementationPlanning
exec cat .sow/project/state.yaml
stdout 'current_state: ImplementationPlanning'

# Task approval fires EventTasksApproved
exec sow agent task add 'Test' --description 'Test'
exec sow agent task approve
# Should be in ImplementationExecuting now (EventTasksApproved fired)
exec cat .sow/project/state.yaml
stdout 'current_state: ImplementationExecuting'

# Task completion fires EventAllTasksComplete automatically
exec sow agent task update 010 --status completed
exec cat .sow/project/state.yaml
stdout 'current_state: ReviewActive'

# =====================================
# Test: State Persistence Across Operations
# =====================================

# Verify state file updated atomically
# Add multiple operations and verify state remains consistent

exec mkdir -p .sow/project/phases/review/reports
exec sh -c 'echo "# Review" > .sow/project/phases/review/reports/001.md'
exec sow agent artifact add project/phases/review/reports/001.md --metadata type=review --metadata assessment=pass
exec sow agent artifact approve project/phases/review/reports/001.md
exec sow agent complete

# Verify state file exists and is valid YAML
exec cat .sow/project/state.yaml
stdout 'current_state: FinalizeDocumentation'
stdout 'phases:'
stdout 'planning:'
stdout 'implementation:'
stdout 'review:'
stdout 'finalize:'

# =====================================
# Cleanup
# =====================================
exec sow agent complete
exec sow agent delete --force
! exists .sow/project
