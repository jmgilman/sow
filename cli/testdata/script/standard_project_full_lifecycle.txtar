# Test: Standard Project Full Lifecycle
# Purpose: Test complete happy path through all phases of standard project
# Coverage: Planning → Implementation → Review → Finalize → Delete

# =====================================
# Setup Git Repository
# =====================================
exec git init
exec git config user.email 'test@example.com'
exec git config user.name 'Test User'
exec git commit --allow-empty -m 'Initial commit'
exec git checkout -b feat/test-lifecycle
exec sow init
stderr '✓ sow initialized successfully'

# =====================================
# Project Initialization
# =====================================
exec sow agent init test-lifecycle --description 'Test full project lifecycle'
stderr '✓ Initialized project'

# Verify project directory structure created
exists .sow/project
exists .sow/project/state.yaml
exists .sow/project/log.md

# Verify initial state is PlanningActive
exec cat .sow/project/state.yaml
stdout 'current_state: PlanningActive'
stdout 'name: test-lifecycle'
stdout 'description: Test full project lifecycle'

# =====================================
# Phase 1: Planning
# =====================================

# Create task list artifact
exec mkdir -p .sow/project/artifacts
exec sh -c 'echo "# Task List\n\n- Task 1: Implement feature\n- Task 2: Write tests" > .sow/project/artifacts/task-list.md'

# Add task list artifact with required metadata
exec sow agent artifact add project/artifacts/task-list.md --metadata type=task_list
stderr '✓ Added artifact'

# Verify artifact added to state
exec cat .sow/project/state.yaml
stdout 'task-list.md'
stdout 'approved: false'

# Approve task list artifact
exec sow agent artifact approve project/artifacts/task-list.md
stderr '✓ Approved artifact'

# Verify artifact approved
exec cat .sow/project/state.yaml
stdout 'approved: true'

# Complete planning phase
exec sow agent complete
stderr '✓ Completed planning phase'

# Verify state transition to ImplementationPlanning
exec cat .sow/project/state.yaml
stdout 'current_state: ImplementationPlanning'
stdout 'status: completed'

# =====================================
# Phase 2: Implementation - Planning
# =====================================

# Add tasks to implementation phase
exec sow agent task add 'Implement core feature' --description 'Core implementation work' --agent implementer
stderr '✓ Created task 010'

exec sow agent task add 'Write unit tests' --description 'Test coverage' --agent implementer
stderr '✓ Created task 020'

# Verify tasks created
exec cat .sow/project/state.yaml
stdout '010'
stdout 'Implement core feature'
stdout '020'
stdout 'Write unit tests'
stdout 'status: pending'

# Verify task directories created
exists .sow/project/phases/implementation/tasks/010
exists .sow/project/phases/implementation/tasks/010/state.yaml
exists .sow/project/phases/implementation/tasks/010/description.md
exists .sow/project/phases/implementation/tasks/010/log.md
exists .sow/project/phases/implementation/tasks/020

# Approve task plan (transitions to ImplementationExecuting)
exec sow agent task approve
stderr '✓ Approved task plan'

# Verify state transition to ImplementationExecuting
exec cat .sow/project/state.yaml
stdout 'current_state: ImplementationExecuting'
stdout 'tasks_approved: true'

# =====================================
# Phase 3: Implementation - Executing
# =====================================

# Update first task to in_progress
exec sow agent task update 010 --status in_progress
stderr '✓ Updated task 010'

# Verify task status updated
exec cat .sow/project/state.yaml
stdout 'status: in_progress'

# Verify task state file updated with timestamp
exec cat .sow/project/phases/implementation/tasks/010/state.yaml
stdout 'status: in_progress'
stdout 'started_at'

# Complete first task
exec sow agent task update 010 --status completed
stderr '✓ Updated task 010'

# Verify task completed
exec cat .sow/project/state.yaml
stdout 'status: completed'

# Verify completed timestamp set
exec cat .sow/project/phases/implementation/tasks/010/state.yaml
stdout 'completed_at'

# Complete second task (should auto-transition to review)
exec sow agent task update 020 --status completed
stderr '✓ Updated task 020'
stderr 'Transitioning to review'

# Verify auto-transition to ReviewActive
exec cat .sow/project/state.yaml
stdout 'current_state: ReviewActive'

# Verify implementation phase completed
exec cat .sow/project/state.yaml
stdout 'implementation:'
stdout 'status: completed'
stdout 'completed_at'

# =====================================
# Phase 4: Review
# =====================================

# Create review report directory
exec mkdir -p .sow/project/phases/review/reports

# Create review report
exec sh -c 'echo "# Review Report\n\nAll code reviewed. Tests pass. Approved." > .sow/project/phases/review/reports/001-review.md'

# Add review artifact
exec sow agent artifact add project/phases/review/reports/001-review.md --metadata type=review --metadata assessment=pass
stderr '✓ Added artifact'

# Approve review artifact
exec sow agent artifact approve project/phases/review/reports/001-review.md
stderr '✓ Approved artifact'

# Verify review artifact in state
exec cat .sow/project/state.yaml
stdout '001-review.md'
stdout 'type: review'
stdout 'assessment: pass'
stdout 'approved: true'

# Complete review phase
exec sow agent complete
stderr '✓ Completed review phase'

# Verify state transition to FinalizeDocumentation
exec cat .sow/project/state.yaml
stdout 'current_state: FinalizeDocumentation'

# =====================================
# Phase 5: Finalize
# =====================================

# Complete finalize (goes through Documentation → Checks → Delete substates)
exec sow agent complete
stderr '✓ Completed finalize phase'

# Verify finalize phase completed
exec cat .sow/project/state.yaml
stdout 'finalize:'
stdout 'status: completed'

# =====================================
# Project Deletion
# =====================================

# Delete project with force flag
exec sow agent delete --force
stderr 'Deleted project'

# Verify project directory removed
! exists .sow/project

# Verify sow is still initialized
exists .sow
exec sow validate
stderr '✓ All validations passed'
