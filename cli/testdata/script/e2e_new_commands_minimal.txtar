# Test: E2E New Commands - Minimal Path
# Purpose: Test new simplified commands (complete, status, info) with minimal workflow
# Exercises: New commands that work with implicit active phase detection

# =====================================
# Setup
# =====================================
exec git init
exec git config user.email 'test@example.com'
exec git config user.name 'Test User'
exec git commit --allow-empty -m 'Initial commit'
exec git checkout -b feat/new-commands-test
exec sow init
stderr '✓ sow initialized successfully'

# =====================================
# Project Initialization (legacy command)
# =====================================
exec sow agent init new-cmd-test --description 'Test new simplified commands'
stderr '✓ Initialized project'

# =====================================
# Test: sow agent status (initial state - PlanningActive)
# =====================================
exec sow agent status
stderr 'Active Phase: planning'

# =====================================
# Test: sow agent info (planning phase)
# =====================================
exec sow agent info
stderr 'Phase: planning'

# =====================================
# Planning Phase - Add task list artifact
# =====================================
exec mkdir -p .sow/project/artifacts
exec sh -c 'echo "# Task List" > .sow/project/artifacts/task-list.md'
exec sow agent artifact add project/artifacts/task-list.md --metadata type=task_list
stderr '✓ Added artifact'

# Approve task list
exec sow agent artifact approve project/artifacts/task-list.md
stderr '✓ Approved artifact'

# =====================================
# Test: sow agent complete (planning)
# =====================================
exec sow agent complete
stderr '✓ Completed planning phase'

# Verify status updated to implementation
exec sow agent status
stderr 'Active Phase: implementation'

# =====================================
# Test: sow agent info (implementation phase)
# =====================================
exec sow agent info
stderr 'Phase: implementation'
stderr '✓ Tasks'

# =====================================
# Implementation Phase (use legacy task commands)
# =====================================
exec sow agent task add 'Test task' --description 'Test the new commands'
stderr '✓ Created task 010'

# Approve task plan
exec sow agent task approve
stderr '✓ Approved task plan'

# Check status shows task count
exec sow agent status
stderr 'Tasks: 1 total'
stderr '○ 1 pending'

# Complete task (auto-transitions to review)
exec sow agent task update 010 --status completed
stderr '✓ Updated task 010'

# Verify auto-transitioned to review
exec sow agent status
stderr 'Active Phase: review'

# =====================================
# Test: sow agent info (review phase)
# =====================================
exec sow agent info
stderr 'Phase: review'

# =====================================
# Review Phase (use generic artifact commands)
# =====================================
exec sow agent artifact add reports/001-review.md --metadata type=review --metadata assessment=pass
stderr '✓ Added artifact'
exec sow agent artifact approve reports/001-review.md
stderr '✓ Approved artifact'

# =====================================
# Test: sow agent complete (review)
# =====================================
exec sow agent complete
stderr '✓ Completed review phase'

# Verify transitioned to finalize
exec sow agent status
stderr 'Active Phase: finalize'

# =====================================
# Finalize Phase (use generic complete command)
# =====================================
exec sow agent complete
stderr '✓ Completed finalize phase'

# =====================================
# Project Deletion (legacy command)
# =====================================
exec sow agent delete --force
stderr 'Deleted project'

# Verify project removed
! exists .sow/project

# =====================================
# Final Validation
# =====================================
exec sow validate
stderr '✓ All validations passed'
