# Test: E2E New Commands - Error Handling
# Purpose: Validate error handling for new simplified commands
# Exercises: Invalid operations, missing projects, wrong phase states

# =====================================
# Setup
# =====================================
exec git init
exec git config user.email 'test@example.com'
exec git config user.name 'Test User'
exec git commit --allow-empty -m 'Initial commit'
exec git checkout -b feat/error-test
exec sow init

# =====================================
# Test commands without active project
# =====================================

# status without project should fail
! exec sow agent status
stderr 'no active project'

# info without project should fail
! exec sow agent info --phase planning
stderr 'no active project'

# skip without project should fail
! exec sow agent skip
stderr 'no active project'

# complete without project should fail
! exec sow agent complete
stderr 'no active project'

# artifact without project should fail
! exec sow agent artifact add some/path.md
stderr 'no active project'

# set without project should fail
! exec sow agent set field value
stderr 'no active project'

# =====================================
# Create project for further tests
# =====================================
exec sow agent init error-test --description 'Test error handling'

# =====================================
# Test skip and complete command errors
# =====================================

# At PlanningActive, planning phase is required (can't skip)
! exec sow agent skip
stderr 'cannot be skipped'

# =====================================
# Test artifact command in planning
# =====================================

# Planning phase supports artifacts
exec mkdir -p .sow/project/artifacts
exec sh -c 'echo "test" > .sow/project/artifacts/task-list.md'
exec sow agent artifact add project/artifacts/task-list.md --metadata type=task_list
stderr '✓ Added artifact'

# Verify it needs approval
exec cat .sow/project/state.yaml
stdout 'approved: false'

# Approve the artifact
exec sow agent artifact approve project/artifacts/task-list.md
stderr '✓ Approved artifact'

# Complete planning (now that task list is approved)
exec sow agent complete

# =====================================
# Test implementation phase errors
# =====================================

# Now at ImplementationPlanning (active implementation phase)
# Can't skip required phase
! exec sow agent skip
stderr 'cannot be skipped'

# Can't add artifact to implementation (doesn't support artifacts)
! exec sow agent artifact add some/path.md
stderr 'not support artifacts'

# =====================================
# Complete workflow
# =====================================

# Add task
exec sow agent task add 'Test' --description 'Test'
exec sow agent task approve

# Complete implementation to move to review
exec sow agent task update 010 --status completed
# All tasks complete, auto-transitions to review

# Add and approve review artifact
exec mkdir -p .sow/project/phases/review/reports
exec sh -c 'echo "# Review" > .sow/project/phases/review/reports/001.md'
exec sow agent artifact add project/phases/review/reports/001.md --metadata type=review --metadata assessment=pass
exec sow agent artifact approve project/phases/review/reports/001.md

# Complete review and finalize
exec sow agent complete
exec sow agent complete
exec sow agent delete --force

# =====================================
# Test planning artifact workflow
# =====================================

# Create new project for artifact testing
exec sow agent init artifact-test --description 'Test artifacts'

# Planning phase supports artifacts
exec mkdir -p .sow/project/artifacts
exec sh -c 'echo "test" > .sow/project/artifacts/context.md'

exec sow agent artifact add project/artifacts/context.md
stderr '✓ Added artifact'

# Add task list (required for completion)
exec sh -c 'echo "# Task List" > .sow/project/artifacts/task-list.md'
exec sow agent artifact add project/artifacts/task-list.md --metadata type=task_list
stderr '✓ Added artifact'

# Verify they need approval
exec cat .sow/project/state.yaml
stdout 'approved: false'

# Approve both artifacts
exec sow agent artifact approve project/artifacts/context.md
stderr '✓ Approved artifact'
exec sow agent artifact approve project/artifacts/task-list.md
stderr '✓ Approved artifact'

# =====================================
# Cleanup
# =====================================
exec sow agent complete
exec sow agent delete --force
