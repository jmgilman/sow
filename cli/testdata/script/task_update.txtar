# Test task update command
# Should update task properties with validation

exec git init
exec git config user.email 'test@example.com'
exec git config user.name 'Test User'
exec git commit --allow-empty -m 'Initial commit'
exec git checkout -b feat/test-feature
exec sow init
exec sow project init my-feature --description 'Add new feature'

# Transition to implementation phase
exec sow project phase enable discovery --type feature
exec sow project phase complete discovery
exec sow project phase enable design
exec sow project phase complete design

# Add first task
exec sow task add 'Add authentication' --description 'Implement JWT auth'

# Add second task (before completing first to avoid auto-transition to review)
exec sow task add 'Create database' --description 'Set up database'

# Add third task
exec sow task add 'Review code' --description 'Code review'

# Add fourth task for inference testing
exec sow task add 'Inference test' --description 'Test inference'

# Test updating status to in_progress
exec sow task update 010 --status in_progress
stderr '✓ Updated task 010'
stderr 'status: pending → in_progress'

# Verify status updated in task state
exec cat .sow/project/phases/implementation/tasks/010/state.yaml
stdout 'status: in_progress'
stdout 'started_at:'
! stdout 'started_at: null'

# Verify status updated in project state
exec cat .sow/project/state.yaml
stdout '  - id: "010"'
stdout '    status: in_progress'

# Test updating status to completed (won't auto-transition since other tasks still pending)
exec sow task update 010 --status completed
stderr '✓ Updated task 010'
stderr 'status: in_progress → completed'

# Verify completed_at timestamp is set
exec cat .sow/project/phases/implementation/tasks/010/state.yaml
stdout 'status: completed'
stdout 'completed_at:'
! stdout 'completed_at: null'

# Test updating directly from pending to completed (sets both started_at and completed_at)
exec sow task update 020 --status completed
stderr '✓ Updated task 020'

# Verify both timestamps are set
exec cat .sow/project/phases/implementation/tasks/020/state.yaml
stdout 'started_at:'
stdout 'completed_at:'
! stdout 'started_at: null'
! stdout 'completed_at: null'

# Test updating to abandoned
exec sow task update 030 --status abandoned
stderr '✓ Updated task 030'
stderr 'status: pending → abandoned'

# Test invalid status
! exec sow task update 010 --status invalid-status
stderr 'invalid status'
stderr 'must be one of pending, in_progress, completed, abandoned'

# Test invalid task ID format
! exec sow task update 01 --status pending
stderr 'invalid task ID'

# Test non-existent task
! exec sow task update 990 --status pending
stderr 'not found'

# Test update without any flags
! exec sow task update 010
stderr 'at least one update flag must be specified'

# Test inference: Set task 040 to in_progress
exec sow task update 040 --status in_progress

# Test update with inference (no task ID provided)
exec sow task update --status completed
stderr '✓ Updated task 040'
stderr 'status: in_progress → completed'

# Verify all updates validate
exec sow validate
stderr '✓ All validations passed'
