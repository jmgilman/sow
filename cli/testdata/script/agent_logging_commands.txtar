# Test: Agent Logging Commands
# Purpose: Test logging infrastructure and session info
# Coverage: log command (project and task level), session-info command

# =====================================
# Setup
# =====================================
exec git init
exec git config user.email 'test@example.com'
exec git config user.name 'Test User'
exec git commit --allow-empty -m 'Initial commit'
exec git checkout -b feat/logging-test
exec sow init

# =====================================
# Session Info - No Project
# =====================================

exec sow agent session-info
stderr 'No active project'

# =====================================
# Create Project
# =====================================

exec sow agent init logging-test --description 'Test logging commands'

# =====================================
# Session Info - With Project
# =====================================

exec sow agent session-info
stderr 'logging-test'
stderr 'feat/logging-test'
stderr 'planning'

# =====================================
# Project-Level Logging
# =====================================

# Project log should exist after init
exists .sow/project/log.md

# Log an action at project level
exec sow agent log --action 'Created planning artifacts' --result 'Task list and context documents ready' --project
stderr '✓ Log entry added to project log'

# Verify log entry in project log
exec cat .sow/project/log.md
stdout 'Created planning artifacts'
stdout 'Task list and context documents ready'

# Log with files
exec sow agent log --action 'Updated documentation' --result 'README and CONTRIBUTING updated' --files README.md --files CONTRIBUTING.md --project
stderr '✓ Log entry added to project log'

exec cat .sow/project/log.md
stdout 'Updated documentation'
stdout 'README.md'
stdout 'CONTRIBUTING.md'

# Log with notes
exec sow agent log --action 'Planning review' --result 'Approved' --notes 'Team reviewed and approved the task breakdown' --project
stderr '✓ Log entry added to project log'

exec cat .sow/project/log.md
stdout 'Planning review'
stdout 'Team reviewed and approved the task breakdown'

# =====================================
# Transition to Implementation for Task Logging
# =====================================

exec mkdir -p .sow/project/artifacts
exec sh -c 'echo "# Tasks" > .sow/project/artifacts/tasks.md'
exec sow agent artifact add project/artifacts/tasks.md --metadata type=task_list
exec sow agent artifact approve project/artifacts/tasks.md
exec sow agent complete
exec sow agent task add 'Feature implementation' --description 'Core feature work'
exec sow agent task approve

# =====================================
# Task-Level Logging (Manual Specification)
# =====================================

# Task log should exist
exists .sow/project/phases/implementation/tasks/010/log.md

# Need to test from task directory for auto-detection, but can force project-level
exec sow agent log --action 'Started implementation' --result 'Setup complete' --project
stderr '✓ Log entry added to project log'

# Verify entry in project log, not task log
exec cat .sow/project/log.md
stdout 'Started implementation'

# =====================================
# Force Project-Level Logging
# =====================================

# Even with task context, can force project-level with --project flag
exec sow agent log --action 'Milestone reached' --result 'Implementation phase started' --project
stderr '✓ Log entry added to project log'

exec cat .sow/project/log.md
stdout 'Milestone reached'

# =====================================
# Test Log Entry Format
# =====================================

# Verify log entries have proper structure (timestamp, action, result)
exec cat .sow/project/log.md
stdout 'timestamp:'
stdout 'action:'
stdout 'result:'

# =====================================
# Test Multiple Log Entries Accumulate
# =====================================

# Add several more entries
exec sow agent log --action 'Test 1' --result 'Result 1' --project
exec sow agent log --action 'Test 2' --result 'Result 2' --project
exec sow agent log --action 'Test 3' --result 'Result 3' --project

# Verify all entries present in chronological order
exec cat .sow/project/log.md
stdout 'Test 1'
stdout 'Test 2'
stdout 'Test 3'

# =====================================
# Session Info After State Changes
# =====================================

# Update task and check session info
exec sow agent task update 010 --status in_progress

exec sow agent session-info
stderr 'logging-test'
stderr 'implementation'

# Complete task and transition to review
exec sow agent task update 010 --status completed

exec sow agent session-info
stderr 'review'

# =====================================
# Cleanup
# =====================================
exec sow agent delete --force
! exists .sow/project

# Verify session info after deletion
exec sow agent session-info
stderr 'No active project'
