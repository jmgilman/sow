# Test: E2E New Commands - Full Workflow
# Purpose: Test all new simplified commands with full workflow including artifacts and custom fields
# Exercises: enable, skip, complete, status, info, artifact add, set

# =====================================
# Setup
# =====================================
exec git init
exec git config user.email 'test@example.com'
exec git config user.name 'Test User'
exec git commit --allow-empty -m 'Initial commit'
exec git checkout -b feat/new-commands-full
exec sow init
stderr '✓ sow initialized successfully'

# =====================================
# Project Initialization
# =====================================
exec sow agent project init full-test --description 'Full test of new commands'
stderr '✓ Initialized project'

# =====================================
# Discovery Phase - Test enable, artifact, set, complete
# =====================================

# Test initial status
exec sow agent status
stderr 'Active Phase: discovery'
stderr 'pending'

# Test info command
exec sow agent info
stderr 'Phase: discovery'
stderr '✓ Artifacts'
stderr 'discovery_type'

# Enable discovery with type
exec sow agent enable discovery --type feature
stderr '✓ Enabled discovery phase'

# Verify status updated
exec sow agent status
stderr 'Active Phase: discovery'
stderr 'in_progress'

# Create discovery artifact
exec mkdir -p .sow/project/phases/discovery/research
exec sh -c 'echo "# Requirements Analysis" > .sow/project/phases/discovery/research/001-requirements.md'

# Test artifact add (implicit phase detection)
exec sow agent artifact add project/phases/discovery/research/001-requirements.md --approved
stderr '✓ Added artifact to discovery phase'

# Verify artifact was added
exec cat .sow/project/state.yaml
stdout '001-requirements.md'
stdout 'approved: true'

# Test set command for discovery_type
exec sow agent set discovery_type feature
stderr '✓ Set discovery_type = feature'

# Verify field was set
exec cat .sow/project/state.yaml
stderr 'discovery_type: feature'

# Complete discovery phase
exec sow agent complete
stderr '✓ Completed discovery phase'

# Verify transitioned to design
exec sow agent status
stderr 'Active Phase: design'
stderr 'pending'

# =====================================
# Design Phase - Test enable, artifact, set, complete
# =====================================

# Test info for design phase
exec sow agent info
stderr 'Phase: design'
stderr '✓ Artifacts'
stderr 'architect_used'

# Enable design
exec sow agent enable design
stderr '✓ Enabled design phase'

# Create design artifacts
exec mkdir -p .sow/project/phases/design/adrs
exec sh -c 'echo "# ADR 001: Architecture" > .sow/project/phases/design/adrs/001-architecture.md'
exec sh -c 'echo "# ADR 002: Data Model" > .sow/project/phases/design/adrs/002-data-model.md'

# Add artifacts
exec sow agent artifact add project/phases/design/adrs/001-architecture.md --approved
stderr '✓ Added artifact to design phase'

exec sow agent artifact add project/phases/design/adrs/002-data-model.md
stderr '✓ Added artifact to design phase'

# Verify one artifact needs approval
exec cat .sow/project/state.yaml
stdout 'approved: false'

# Test set command for architect_used
exec sow agent set architect_used true
stderr '✓ Set architect_used = true'

# Complete design
exec sow agent complete
stderr '✓ Completed design phase'

# =====================================
# Implementation Phase - Test set, status, complete
# =====================================

# Verify transitioned to implementation
exec sow agent status
stderr 'Active Phase: implementation'

# Test info
exec sow agent info
stderr 'Phase: implementation'
stderr '✓ Tasks'
stdout 'planner_used'
stdout 'tasks_approved'

# Add tasks (legacy command)
exec sow agent task add 'Task 1' --description 'First task'
stderr '✓ Created task 010'

exec sow agent task add 'Task 2' --description 'Second task'
stderr '✓ Created task 020'

# Check status shows tasks
exec sow agent status
stderr 'Tasks: 2 total'
stderr '○ 2 pending'

# Test set command for planner_used
exec sow agent set planner_used true
stderr '✓ Set planner_used = true'

# Test set command for tasks_approved (bool)
exec sow agent set tasks_approved true
stderr '✓ Set tasks_approved = true'

# Complete tasks
exec sow agent task update 010 --status completed
exec sow agent task update 020 --status completed

# Check status shows completed tasks
exec sow agent status
stderr 'Tasks: 2 total'
stderr '✓ 2 completed'

# Complete implementation
exec sow agent complete
stderr '✓ Completed implementation phase'

# =====================================
# Review Phase - Test set, complete
# =====================================

# Verify transitioned to review
exec sow agent status
stderr 'Active Phase: review'

# Test info
exec sow agent info
stderr 'Phase: review'
stdout 'iteration'

# Add review report (legacy)
exec sow agent project review add-report reports/001-review.md --assessment pass
exec sow agent project review approve 001

# Test set command for iteration (int)
exec sow agent set iteration 1
stderr '✓ Set iteration = 1'

# Verify field was set
exec cat .sow/project/state.yaml
stderr 'iteration: 1'

# Complete review
exec sow agent complete
stderr '✓ Completed review phase'

# =====================================
# Finalize Phase - Test set, status, complete
# =====================================

# Verify transitioned to finalize
exec sow agent status
stderr 'Active Phase: finalize'

# Test info
exec sow agent info
stderr 'Phase: finalize'
stdout 'project_deleted'
stdout 'pr_url'

# Complete subphases (legacy)
exec sow agent project finalize complete documentation
exec sow agent project finalize complete checks

# Test set command for pr_url (string)
exec sow agent set pr_url 'https://github.com/org/repo/pull/123'
stderr '✓ Set pr_url'

# Verify field was set
exec cat .sow/project/state.yaml
stdout 'https://github.com/org/repo/pull/123'

# Delete project (legacy)
exec sow agent project delete --force
stderr 'Deleted project'

# =====================================
# Final Validation
# =====================================
! exists .sow/project
exec sow validate
stderr '✓ All validations passed'
